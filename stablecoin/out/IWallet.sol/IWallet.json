{"abi":[{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct UserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"callGas","type":"uint256","internalType":"uint256"},{"name":"verificationGas","type":"uint256","internalType":"uint256"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"maxFeePerGas","type":"uint256","internalType":"uint256"},{"name":"maxPriorityFeePerGas","type":"uint256","internalType":"uint256"},{"name":"paymaster","type":"address","internalType":"address"},{"name":"paymasterData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"requestId","type":"bytes32","internalType":"bytes32"},{"name":"requiredPrefund","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),bytes32,uint256)":"fcbac1f4"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredPrefund\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"requestId\":\"hash of the user's request data. can be used as the basis for signature.\",\"requiredPrefund\":\"the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfuly.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/scw-contracts/contracts/smart-contract-wallet/IWallet.sol\":\"IWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@account-abstraction/=lib/account-abstraction/\",\":@biconomy/smart-account/=lib/scw-contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":scw-contracts/=lib/scw-contracts/\"]},\"sources\":{\"lib/scw-contracts/contracts/smart-contract-wallet/IWallet.sol\":{\"keccak256\":\"0xfb0cca693e13249b65782e12147a282853008f53d9f53f0fed1cf5c22b8c9ed4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f6aaef6d9ad57595477ba5be156ff9c6c40aea380ebc3e043944f645a7a153b6\",\"dweb:/ipfs/QmTtUMYhiFepad49zkBZXWWipM7ZJCMT7WfNKNeq7iCuSc\"]},\"lib/scw-contracts/contracts/smart-contract-wallet/libs/UserOperation.sol\":{\"keccak256\":\"0x5d1f30bee7bfbc11852f472b380509a4932996e66a1ce313a1af5e080e050d61\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9c930b424a918ea59ca580ec4de333128bf0d844a587823c8128aa45321a6011\",\"dweb:/ipfs/QmQ44jDp9PoioYXaGri4MticbDkrPrLnW6LPj1FFWVJoob\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct UserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGas","type":"uint256"},{"internalType":"uint256","name":"verificationGas","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"requiredPrefund","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp"}],"devdoc":{"kind":"dev","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"requestId":"hash of the user's request data. can be used as the basis for signature.","requiredPrefund":"the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.","userOp":"the operation that is about to be executed."}}},"version":1},"userdoc":{"kind":"user","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfuly."}},"version":1}},"settings":{"remappings":["@account-abstraction/=lib/account-abstraction/","@biconomy/smart-account/=lib/scw-contracts/","@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","account-abstraction/=lib/account-abstraction/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","scw-contracts/=lib/scw-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/scw-contracts/contracts/smart-contract-wallet/IWallet.sol":"IWallet"},"evmVersion":"paris","libraries":{}},"sources":{"lib/scw-contracts/contracts/smart-contract-wallet/IWallet.sol":{"keccak256":"0xfb0cca693e13249b65782e12147a282853008f53d9f53f0fed1cf5c22b8c9ed4","urls":["bzz-raw://f6aaef6d9ad57595477ba5be156ff9c6c40aea380ebc3e043944f645a7a153b6","dweb:/ipfs/QmTtUMYhiFepad49zkBZXWWipM7ZJCMT7WfNKNeq7iCuSc"],"license":"GPL-3.0"},"lib/scw-contracts/contracts/smart-contract-wallet/libs/UserOperation.sol":{"keccak256":"0x5d1f30bee7bfbc11852f472b380509a4932996e66a1ce313a1af5e080e050d61","urls":["bzz-raw://9c930b424a918ea59ca580ec4de333128bf0d844a587823c8128aa45321a6011","dweb:/ipfs/QmQ44jDp9PoioYXaGri4MticbDkrPrLnW6LPj1FFWVJoob"],"license":"GPL-3.0"}},"version":1},"id":46}